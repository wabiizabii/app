# ui/ai_section.py
import streamlit as st
import pandas as pd

# Import functions and settings from other modules
from config import settings
from core import supabase_handler as db_handler
from core import analytics_engine

def render_ai_section():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• AI Assistant ‡πÅ‡∏•‡∏∞ Dashboard
    (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö Error ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ session_state key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    """
    with st.expander("ü§ñ AI Assistant & Performance Dashboard", expanded=False):
        
        # --- ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Sidebar ---
        active_portfolio_id_for_ai = st.session_state.get('active_portfolio_id', None)
        portfolio_details = st.session_state.get('current_portfolio_details') or {}
        active_portfolio_name_for_ai = portfolio_details.get('PortfolioName', "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï)")
        balance_for_ai_simulation = st.session_state.get('current_account_balance', settings.DEFAULT_ACCOUNT_BALANCE)

        if active_portfolio_id_for_ai:
            st.info(f"AI Assistant ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï: **'{active_portfolio_name_for_ai}'**")
        else:
            st.info(f"AI Assistant ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Active Portfolio)")

        # --- Tab interface ---
        tab1, tab2, tab3 = st.tabs([
            "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô (Planned)", 
            "üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á (Actual)",
            "üß† AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å (Combined)"
        ])

        # --- Planned Analysis Tab with Error Handling ---
        with tab1:
            st.markdown("### üìù AI Intelligence Report (‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î)")
            try:
                df_ai_planned_logs = db_handler.load_all_planned_trade_logs()
                
                planned_analysis_results = analytics_engine.analyze_planned_trades_for_ai(
                    df_all_planned_logs=db_handler.load_all_planned_trade_logs(),
                    active_portfolio_id=active_portfolio_id_for_ai,
                    active_portfolio_name=active_portfolio_name_for_ai,
                    balance_for_simulation=balance_for_ai_simulation
                )

                if planned_analysis_results.get("error_message") and not planned_analysis_results.get("data_found"):
                    st.info(planned_analysis_results["error_message"])
                elif planned_analysis_results.get("data_found"):
                    st.write(f"- **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:** {planned_analysis_results['total_trades']:,}")
                    st.write(f"- **Winrate (‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô):** {planned_analysis_results['win_rate']:.2f}%")
                    st.write(f"- **‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô):** {planned_analysis_results['gross_pnl']:,.2f} USD")
                    st.write(f"- **RR ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô, >0):** {planned_analysis_results['avg_rr']}")
                    st.write(f"- **Max Drawdown (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô):** {planned_analysis_results['max_drawdown_simulated']:,.2f} USD")
                    
                    st.markdown("#### ü§ñ AI Insight (‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î)")
                    insights_planned = planned_analysis_results.get("insights", [])
                    if not insights_planned and planned_analysis_results['total_trades'] > 0:
                         insights_planned = ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Insight ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"]

                    for msg in insights_planned:
                        st.info(msg)
                else:
                    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Assistant")
            except Exception as e:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î'")
                st.exception(e)

        # --- Actual Analysis Tab with Error Handling ---
        with tab2:
            st.subheader("Dashboard ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
            try:
                df_ai_actual_trades_all = db_handler.load_actual_trades()
                df_all_statement_summaries = db_handler.load_statement_summaries()
                dashboard_results = analytics_engine.get_dashboard_analytics_for_actual(
                    df_all_actual_trades=df_ai_actual_trades_all,
                    df_all_statement_summaries=df_all_statement_summaries,
                    active_portfolio_id=active_portfolio_id_for_ai
                )
                if not dashboard_results.get("data_found"):
                    st.warning(dashboard_results.get("error_message", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Statement ‡∏Å‡πà‡∏≠‡∏ô)"))
                else:
                    metrics = dashboard_results.get("metrics", {})
                    st.markdown("#### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
                    col1, col2, col3, col4 = st.columns(4)
                    col1.metric("Total Net Profit", f"{metrics.get('Total Net Profit', 0):,.2f} USD")
                    col2.metric("Win Rate", f"{metrics.get('Win Rate (%)', 0):.2f}%")
                    col3.metric("Profit Factor", f"{metrics.get('Profit Factor', 0):.2f}")
                    col4.metric("Total Deals", f"{metrics.get('Total Deals', 0):,}")
                    st.markdown("#### Balance Curve")
                    balance_curve_data = dashboard_results.get("balance_curve_data")
                    if balance_curve_data is not None and not balance_curve_data.empty:
                        st.line_chart(balance_curve_data)
                    else:
                        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Balance Curve")
            except Exception as e:
                st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á'")
                st.exception(e)

        # --- Combined Analysis Tab with Error Handling ---
        with tab3:
            st.subheader("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
            st.write("‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
            if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å!"):
                try:
                    df_planned_logs = db_handler.load_all_planned_trade_logs()
                    df_actual_trades = db_handler.load_actual_trades()

                    if df_ai_planned_logs.empty or df_ai_actual_trades.empty:
                        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á'")
                    else:
                        with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
                            combined_results = analytics_engine.analyze_combined_trades_for_ai(
                                df_planned=df_ai_planned_logs,
                                df_actual=df_ai_actual_trades,
                                active_portfolio_id=active_portfolio_id_for_ai,
                                active_portfolio_name=active_portfolio_name_for_ai
                            )
                            st.markdown("#### üí° AI Insights")
                            if combined_results.get("error_message"):
                                st.error(combined_results["error_message"])
                            elif not combined_results.get("insights"):
                                st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö Insight ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
                            else:
                                for insight in combined_results["insights"]:
                                    st.info(insight)
                except Exception as e:
                    st.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
                    st.exception(e)

def render_ai_insights(insights: dict):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AI-Powered Insights ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏≤‡∏à‡∏≤‡∏Å analytics_engine
    """
    if not insights:
        st.info("‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Insights")
        return

    col1, col2, col3 = st.columns(3)

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Performance by Day
    with col1:
        st.markdown("##### üìÖ By Day")
        best_day, best_day_pnl = insights.get('best_day', ('N/A', 0))
        worst_day, worst_day_pnl = insights.get('worst_day', ('N/A', 0))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        if best_day != 'N/A':
            st.metric(label=f"Best Day ({best_day})", value=f"${best_day_pnl:,.2f}")
        if worst_day != 'N/A':
            st.metric(label=f"Worst Day ({worst_day})", value=f"${worst_day_pnl:,.2f}", delta_color="inverse")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: Performance by Pair
    with col2:
        st.markdown("##### üíπ By Pair")
        best_pair, best_pair_pnl = insights.get('best_pair', ('N/A', 0))
        worst_pair, worst_pair_pnl = insights.get('worst_pair', ('N/A', 0))
        
        if best_pair != 'N/A':
            st.metric(label=f"Best Pair ({best_pair})", value=f"${best_pair_pnl:,.2f}")
        if worst_pair != 'N/A':
            st.metric(label=f"Worst Pair ({worst_pair})", value=f"${worst_pair_pnl:,.2f}", delta_color="inverse")

    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: Performance by Direction
    with col3:
        st.markdown("##### üìà By Direction")
        long_pnl, short_pnl = insights.get('long_vs_short_pnl', (0, 0))
        st.metric(label="Long PnL", value=f"${long_pnl:,.2f}")
        st.metric(label="Short PnL", value=f"${short_pnl:,.2f}")
