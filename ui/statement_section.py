# ui/statement_section.py 

import streamlit as st
import pandas as pd
import hashlib
from datetime import datetime
import uuid
import traceback # ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏ô‡∏µ‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ

from config import settings
from core import gs_handler, statement_processor

def render_statement_section():
    with st.expander("üìÇ Ultimate Chart Dashboard Import & Processing", expanded=False):
        st.markdown("### üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Statement ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
        st.markdown("---")
        st.subheader("üì§ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Statement Report (CSV)")

        if 'uploader_key' not in st.session_state:
            st.session_state.uploader_key = 0

        uploaded_file = st.file_uploader(
            "‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Statement Report (CSV) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
            type=["csv"],
            key=f"statement_uploader_{st.session_state.uploader_key}"
        )

        if uploaded_file and st.session_state.get('processed_filename') != uploaded_file.name:
            st.session_state['extracted_data'] = None
            st.session_state['processed_filename'] = uploaded_file.name

        if uploaded_file is not None:
            active_portfolio_id = st.session_state.get('active_portfolio_id_gs')
            active_portfolio_name = st.session_state.get('active_portfolio_name_gs')

            if not active_portfolio_id:
                st.toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", icon="‚ö†Ô∏è")
                return

            with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}'..."):
                try:
                    # --- Pre-computation ---
                    file_content_bytes = uploaded_file.getvalue()
                    current_file_hash = hashlib.md5(file_content_bytes).hexdigest()
                    
                    # --- Duplicate File Check ---
                    gc = gs_handler.get_gspread_client()
                    ws_dict, setup_error = gs_handler.setup_and_get_worksheets(gc)
                    if setup_error:
                        st.error(f"Setup GSheet Error: {setup_error}")
                        return
                    
                    history_ws = ws_dict.get(settings.WORKSHEET_UPLOAD_HISTORY)
                    if history_ws:
                        is_duplicate, details = gs_handler.check_for_duplicate_file_hash(history_ws, current_file_hash)
                        if is_duplicate:
                            st.error(f"**‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥!**")
                            st.warning(f"‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï **'{details['PortfolioName']}'** ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà **{details['UploadTimestamp']}**")
                            st.info("‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå Statement ‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà")
                            st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    
                    # --- Extraction ---
                    st.session_state['extracted_data'] = statement_processor.extract_data_from_report_content(file_content_bytes)
                    st.session_state['file_info_to_save'] = {"name": uploaded_file.name, "size": uploaded_file.size, "content_bytes": file_content_bytes, "hash": current_file_hash}
                
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå: {e}")
                    st.session_state['extracted_data'] = None

            if st.session_state.get('extracted_data'):
                st.markdown("---")
                st.subheader("üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)")
                
                extracted_data = st.session_state['extracted_data']
                deals_count = len(extracted_data.get('deals', pd.DataFrame()))
                orders_count = len(extracted_data.get('orders', pd.DataFrame()))
                positions_count = len(extracted_data.get('positions', pd.DataFrame()))
                balance_summary = extracted_data.get('balance_summary', {})
                results_summary = extracted_data.get('results_summary', {})

                st.success(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:")
                
                col1, col2, col3 = st.columns(3)
                col1.metric("Deals ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{deals_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                col2.metric("Orders ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{orders_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                col3.metric("Positions ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{positions_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                
                # --- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Summary ---
                st.markdown("#####  —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Financial Summary)")
                sum_col1, sum_col2, sum_col3, sum_col4 = st.columns(4)
                sum_col1.metric("Equity", f"${balance_summary.get('equity', 0.0):,.2f}")
                sum_col2.metric("Balance", f"${balance_summary.get('balance', 0.0):,.2f}")
                sum_col3.metric("Profit", f"${results_summary.get('profit', 0.0):,.2f}", delta=results_summary.get('profit', 0.0))
                sum_col4.metric("Deposit", f"${results_summary.get('deposit_load', 0.0):,.2f}")
                
                st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")


        if st.session_state.get('extracted_data'):
            st.markdown("---")
            st.subheader("üíæ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Confirm & Save)"):
                try:
                    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å session_state ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ
                    extracted_data = st.session_state['extracted_data']
                    file_info = st.session_state['file_info_to_save']
                    active_portfolio_id = st.session_state.get('active_portfolio_id_gs')
                    active_portfolio_name = st.session_state.get('active_portfolio_name_gs')

                    has_errors = False
                    
                    # --- Setup GSheets ---
                    gc = gs_handler.get_gspread_client()
                    ws_dict, setup_error = gs_handler.setup_and_get_worksheets(gc)

                    if setup_error:
                        st.error(f"Setup GSheet Error: {setup_error}")
                        return

                    # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Deals..."):
                        deals_data = extracted_data.get('deals', pd.DataFrame())
                        ok_d, new_d, skip_d = gs_handler.save_deals_to_actual_trades(ws_dict.get(settings.WORKSHEET_ACTUAL_TRADES), deals_data, active_portfolio_id, active_portfolio_name, file_info['name'], "batch_id_placeholder")
                        if not ok_d: has_errors = True
                    st.write(f"Deals: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏´‡∏°‡πà {new_d}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_d})")

                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Orders..."):
                        orders_data = extracted_data.get('orders', pd.DataFrame())
                        ok_o, new_o, skip_o = gs_handler.save_orders_to_actul_orders(ws_dict.get(settings.WORKSHEET_ACTUAL_ORDERS), orders_data, active_portfolio_id, active_portfolio_name, file_info['name'], "batch_id_placeholder")
                        if not ok_o: has_errors = True
                    st.write(f"Orders: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏´‡∏°‡πà {new_o}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_o})")

                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Positions..."):
                        positions_data = extracted_data.get('positions', pd.DataFrame())
                        ok_p, new_p, skip_p = gs_handler.save_positions_to_actul_positions(ws_dict.get(settings.WORKSHEET_ACTUAL_POSITIONS), positions_data, active_portfolio_id, active_portfolio_name, file_info['name'], "batch_id_placeholder")
                        if not ok_p: has_errors = True
                    st.write(f"Positions: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡πÉ‡∏´‡∏°‡πà {new_p}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_p})")
                    
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Summary..."):
                        bal_summary = extracted_data.get('balance_summary', {})
                        res_summary = extracted_data.get('results_summary', {})
                        ok_s, note_s = gs_handler.save_results_summary_to_gsheets(ws_dict.get(settings.WORKSHEET_STATEMENT_SUMMARIES), bal_summary, res_summary, active_portfolio_id, active_portfolio_name, file_info['name'], "batch_id_placeholder")
                        if not ok_s: has_errors = True
                    st.write(f"Summary: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {note_s})")
                    
                    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (History Log) ---
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..."):
                        upload_status = "Success" if not has_errors else "Failed"
                        notes_message = f"Deals:New={new_d},Skip={skip_d},OK={ok_d} | Orders:New={new_o},Skip={skip_o},OK={ok_o} | Positions:New={new_p},Skip={skip_p},OK={ok_p} | Summary:Status={note_s},OK={ok_s}"
                        import_batch_id = str(uuid.uuid4())
                        history_log = {
                            "UploadTimestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "PortfolioID": active_portfolio_id, "PortfolioName": active_portfolio_name,
                            "FileName": file_info['name'], "FileSize": file_info['size'],
                            "FileHash": hashlib.md5(file_info['content_bytes']).hexdigest(),
                            "Status": upload_status, "ImportBatchID": import_batch_id, "Notes": notes_message
                        }
                        history_worksheet = ws_dict.get(settings.WORKSHEET_UPLOAD_HISTORY)
                        if history_worksheet:
                            save_ok, save_note = gs_handler.save_upload_history(history_worksheet, history_log)
                        else:
                            st.warning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `WORKSHEET_UPLOAD_HISTORY` ‡πÉ‡∏ô settings")
                    st.write("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    
                    # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ---
                    st.balloons()
                    st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                    
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session state ‡πÅ‡∏•‡∏∞ reset uploader
                    st.session_state['extracted_data'] = None
                    st.session_state.uploader_key += 1
                    st.rerun() 

                except Exception as e:
                    st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                    st.exception(e)