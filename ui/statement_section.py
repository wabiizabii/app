# ui/statement_section.py
# ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö: ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î, ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

import streamlit as st
import pandas as pd
import hashlib
from datetime import datetime
import uuid
import traceback

from config import settings
from core import gs_handler, statement_processor


def render_statement_section(df_portfolios_gs: pd.DataFrame):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤ "Import Statement" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î, ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    with st.expander("üìÇ Import & Processing", expanded=True):
        st.markdown("### üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Statement ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
        st.markdown("---")

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
        st.subheader("üì§ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Statement Report (CSV)")

        if 'uploader_key' not in st.session_state:
            st.session_state.uploader_key = 0
        
        uploaded_file = st.file_uploader(
            "‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Statement Report (CSV) ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
            type=["csv"],
            key=f"statement_uploader_{st.session_state.uploader_key}"
        )

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ---
        if uploaded_file:
            if st.session_state.get('processed_filename') != uploaded_file.name:
                st.session_state['extracted_data'] = None
                st.session_state['processed_filename'] = uploaded_file.name

            active_portfolio_id = st.session_state.get('active_portfolio_id_gs')
            if not active_portfolio_id:
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà Sidebar ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå")
                st.stop()

            if st.session_state.get('extracted_data') is None:
                with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}'..."):
                    try:
                        file_content_bytes = uploaded_file.getvalue()
                        
                        st.session_state['file_info_to_save'] = {
                            "name": uploaded_file.name,
                            "hash": hashlib.md5(file_content_bytes).hexdigest(),
                            "content_bytes": file_content_bytes
                        }
                        
                        st.session_state['extracted_data'] = statement_processor.extract_data_from_report_content(file_content_bytes)
                        st.success("‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

                    except Exception as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
                        traceback.print_exc()
                        st.session_state['extracted_data'] = None

        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå (‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î) ---
        if st.session_state.get('extracted_data'):
            st.markdown("---")
            st.subheader("üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)")

            extracted = st.session_state.get('extracted_data', {})
            deals_df = extracted.get('deals', pd.DataFrame())
            orders_df = extracted.get('orders', pd.DataFrame())
            positions_df = extracted.get('positions', pd.DataFrame())
            portfolio_details = extracted.get('portfolio_details', {})
            deposit_withdrawal_logs = extracted.get('deposit_withdrawal_logs', [])
            final_summary_data = extracted.get('final_summary_data', {})

            if deals_df.empty:
                st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'Deals' ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå")
                return

            st.success(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: **{st.session_state['file_info_to_save']['name']}**")
            
            st.markdown("##### ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö")
            col_c1, col_c2, col_c3, col_c4, col_c5 = st.columns(5)
            col_c1.metric("Deals ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{len(deals_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            col_c2.metric("Orders ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{len(orders_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            col_c3.metric("Positions ‡∏ó‡∏µ‡πà‡∏û‡∏ö", f"{len(positions_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            col_c4.metric("Deposit ‡∏¢‡πà‡∏≠‡∏¢", f"{len([d for d in deposit_withdrawal_logs if d['Type'] == 'Deposit'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            col_c5.metric("Withdrawal ‡∏¢‡πà‡∏≠‡∏¢", f"{len([d for d in deposit_withdrawal_logs if d['Type'] == 'Withdrawal'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.markdown("---")

            st.markdown("##### ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ (Financial & Performance Summary)")
            
            # ### ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ###
            st.markdown("###### ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏£‡πå‡∏à‡∏¥‡πâ‡∏ô (Balance & Margin)")
            b_col1, b_col2, b_col3, b_col4 = st.columns(4)
            b_col1.metric("Balance", f"${final_summary_data.get('Balance', 0.0):,.2f}")
            b_col2.metric("Equity", f"${final_summary_data.get('Equity', 0.0):,.2f}")
            b_col3.metric("Floating P/L", f"${final_summary_data.get('Floating_P_L', 0.0):,.2f}")
            b_col4.metric("Credit Facility", f"${final_summary_data.get('Credit_Facility', 0.0):,.2f}")
            
            st.markdown("###### ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏ù‡∏≤‡∏Å/‡∏ñ‡∏≠‡∏ô")
            pnl_cols = st.columns(4)
            pnl_cols[0].metric("Net Profit (‡∏£‡∏ß‡∏°)", f"${final_summary_data.get('Total_Net_Profit', 0.0):,.2f}", delta=f"{final_summary_data.get('Total_Net_Profit', 0.0):.2f}")
            pnl_cols[1].metric("Gross Profit", f"${final_summary_data.get('Gross_Profit', 0.0):,.2f}")
            pnl_cols[2].metric("Gross Loss", f"${final_summary_data.get('Gross_Loss', 0.0):,.2f}")
            pnl_cols[3].metric("Deposit/Withdrawal", f"${final_summary_data.get('Deposit', 0.0) + final_summary_data.get('Withdrawal', 0.0):,.2f}")

            st.markdown("---")
            
            # ### ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ ###
            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Layout 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            col1, col2, col3 = st.columns(3)

            # --- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ---
            with col1:
                st.markdown("##### ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
                st.metric(label="Total Trades", value=f"{int(final_summary_data.get('Total_Trades', 0))}")
                
                profit_trades_count = int(final_summary_data.get('Profit_Trades_Count', 0))
                profit_trades_percent = final_summary_data.get('Profit_Trades_Percent', 0)
                st.metric(label="Profit Trades (% of total)", value=f"{profit_trades_count} ({profit_trades_percent:.2f}%)")
                
                loss_trades_count = int(final_summary_data.get('Loss_Trades_Count', 0))
                loss_trades_percent = final_summary_data.get('Loss_Trades_Percent', 0)
                st.metric(label="Loss Trades (% of total)", value=f"{loss_trades_count} ({loss_trades_percent:.2f}%)")
                
                short_trades_count = int(final_summary_data.get('Short_Trades_Count', 0))
                short_trades_won_percent = final_summary_data.get('Short_Trades_Won_Percent', 0)
                st.metric(label="Short Trades (won %)", value=f"{short_trades_count} ({short_trades_won_percent:.2f}%)")
                
                long_trades_count = int(final_summary_data.get('Long_Trades_Count', 0))
                long_trades_won_percent = final_summary_data.get('Long_Trades_Won_Percent', 0)
                st.metric(label="Long Trades (won %)", value=f"{long_trades_count} ({long_trades_won_percent:.2f}%)")

            # --- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ---
            with col2:
                st.markdown("##### ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô")
                st.metric(label="Largest profit trade", value=f"${final_summary_data.get('Largest_Profit_Trade', 0):,.2f}")
                st.metric(label="Largest loss trade", value=f"${final_summary_data.get('Largest_Loss_Trade', 0):,.2f}")
                st.metric(label="Average profit trade", value=f"${final_summary_data.get('Average_Profit_Trade', 0):,.2f}")
                st.metric(label="Average loss trade", value=f"${final_summary_data.get('Average_Loss_Trade', 0):,.2f}")

                st.markdown("##### ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û")
                st.metric(label="Average consecutive wins", value=f"{int(final_summary_data.get('Average_Consecutive_Wins', 0))}")
                st.metric(label="Average consecutive losses", value=f"{int(final_summary_data.get('Average_Consecutive_Losses', 0))}")


            # --- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞ Drawdown ---
            with col3:
                st.markdown("##### ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
                st.metric(label="Profit Factor", value=f"{final_summary_data.get('Profit_Factor', 0):.2f}")
                st.metric(label="Expected Payoff", value=f"${final_summary_data.get('Expected_Payoff', 0):,.2f}")
                st.metric(label="Recovery Factor", value=f"{final_summary_data.get('Recovery_Factor', 0):.2f}")
                st.metric(label="Sharpe Ratio", value=f"{final_summary_data.get('Sharpe_Ratio', 0):.2f}")
                
                st.markdown("##### ‡∏Å‡∏•‡∏∏‡πà‡∏° Drawdown")
                st.metric(label="Maximal Drawdown", value=f"${final_summary_data.get('Maximal_Drawdown_Value', 0):,.2f} ({final_summary_data.get('Maximal_Drawdown_Percent', 0):.2f}%)")
                st.metric(label="Balance Drawdown Absolute", value=f"${final_summary_data.get('Balance_Drawdown_Absolute', 0):,.2f}")


            st.markdown("---")
            st.markdown("##### ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô)")
            detail_cols = st.columns(3)
            account_id_from_report = portfolio_details.get('account_id', 'N/A')
            account_name_from_report = portfolio_details.get('account_name', 'N/A')
            client_name_from_report = portfolio_details.get('client_name', 'N/A')

            detail_cols[0].info(f"**Account ID:** {account_id_from_report}")
            detail_cols[1].info(f"**Account Name:** {account_name_from_report}")
            detail_cols[2].info(f"**Client Name:** {client_name_from_report}")
            
            st.info(f"**Credit (‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô):** ${final_summary_data.get('Credit_Facility', 0.0):,.2f}")


            st.markdown("---")
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

            # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå) ---
            st.subheader("üíæ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Confirm & Save)"):
                with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                    try:
                        # --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å Session State ---
                        extracted = st.session_state['extracted_data']
                        file_info = st.session_state['file_info_to_save']
                        active_portfolio_id = st.session_state.get('active_portfolio_id_gs')
                        active_portfolio_name = st.session_state.get('active_portfolio_name_gs')
                        portfolio_details = extracted.get('portfolio_details', {})
                        account_id_from_report = portfolio_details.get('account_id', 'N/A')
                        
                        # --- Setup Google Sheets ---
                        gc = gs_handler.get_gspread_client()
                        if not gc:
                            st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Client ‡πÑ‡∏î‡πâ")
                            st.stop()
                        ws_dict, setup_error = gs_handler.setup_and_get_worksheets(gc)
                        if setup_error:
                            st.error(f"Setup GSheet Error: {setup_error}")
                            st.stop()
                        
                        final_portfolio_id_for_save = account_id_from_report if account_id_from_report not in ['N/A', '', None] else active_portfolio_id
                        portfolio_name_to_save = portfolio_details.get('account_name', active_portfolio_name)

                        st.info("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô...")

                        final_portfolio_id_for_save = active_portfolio_id
                        portfolio_name_to_save = active_portfolio_name

                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏û‡∏≠‡∏£‡πå‡∏ï: '{portfolio_name_to_save}' (ID: {final_portfolio_id_for_save})")

                        # ‡∏î‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤" ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        is_duplicate, details = gs_handler.is_file_already_uploaded(file_info['hash'], final_portfolio_id_for_save, gc)
                        if is_duplicate:
                            st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï '{details.get('PortfolioName', 'N/A')}'")
                            st.info("‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï UploadHistory")
                            st.stop()

                        st.success("‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
                        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ---
                        has_errors = False
                        import_batch_id = str(uuid.uuid4())
                        
                        deals_df = extracted.get('deals', pd.DataFrame())
                        orders_df = extracted.get('orders', pd.DataFrame())
                        positions_df = extracted.get('positions', pd.DataFrame())
                        deposit_withdrawal_logs = extracted.get('deposit_withdrawal_logs', [])
                        final_summary_data = extracted.get('final_summary_data', {})
                        
                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Deals ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Deals ---")
                        ok_d, msg_d, num_d, skip_d = gs_handler.save_deals_to_actual_trades(
                            ws_dict.get(settings.WORKSHEET_ACTUAL_TRADES), deals_df,
                            final_portfolio_id_for_save, portfolio_name_to_save, file_info['name'], import_batch_id
                        )
                        if not ok_d: has_errors = True; st.error(f"Deals Error: {msg_d}")
                        else: st.write(f"Deals: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà {num_d}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_d} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.")

                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Orders ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Orders ---")
                        ok_o, msg_o, num_o, skip_o = gs_handler.save_orders_to_actul_orders(
                            ws_dict.get(settings.WORKSHEET_ACTUAL_ORDERS), orders_df,
                            final_portfolio_id_for_save, portfolio_name_to_save, file_info['name'], import_batch_id
                        )
                        if not ok_o: has_errors = True; st.error(f"Orders Error: {msg_o}")
                        else: st.write(f"Orders: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà {num_o}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_o} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.")

                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Positions ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Positions ---")
                        ok_p, msg_p, num_p, skip_p = gs_handler.save_positions_to_actul_positions(
                            ws_dict.get(settings.WORKSHEET_ACTUAL_POSITIONS), positions_df,
                            final_portfolio_id_for_save, portfolio_name_to_save, file_info['name'], import_batch_id
                        )
                        if not ok_p: has_errors = True; st.error(f"Positions Error: {msg_p}")
                        else: st.write(f"Positions: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà {num_p}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_p} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.")
                        
                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Statement Summaries ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Statement Summaries ---")
                        ok_s, msg_s = gs_handler.save_results_summary_to_gsheets(
                            ws_dict.get(settings.WORKSHEET_STATEMENT_SUMMARIES), final_summary_data,
                            final_portfolio_id_for_save, portfolio_name_to_save, file_info['name'], import_batch_id
                        )
                        if not ok_s: has_errors = True; st.error(f"Summary Error: {msg_s}")
                        else: st.write("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Summary ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à.")

                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Deposit/Withdrawal Logs ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Deposit/Withdrawal Logs ---")
                        ok_dw, msg_dw, num_dw, skip_dw = gs_handler.save_deposit_withdrawal_logs(
                            ws_dict.get(settings.WORKSHEET_DEPOSIT_WITHDRAWAL_LOGS), deposit_withdrawal_logs,
                            final_portfolio_id_for_save, portfolio_name_to_save, file_info['name'], import_batch_id
                        )
                        if not ok_dw: has_errors = True; st.error(f"Deposit/Withdrawal Logs Error: {msg_dw}")
                        else: st.write(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Deposit/Withdrawal Logs ‡πÉ‡∏´‡∏°‡πà {num_dw}, ‡∏Ç‡πâ‡∏≤‡∏° {skip_dw} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.")

                        # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ---
                        st.write("--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Upload History ---")
                        history_log = {
                            "UploadTimestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "PortfolioID": final_portfolio_id_for_save,
                            "PortfolioName": portfolio_name_to_save,
                            "FileName": file_info['name'],
                            "FileHash": file_info['hash'],
                            "Status": "Success" if not has_errors else "Failed with errors",
                            "ImportBatchID": import_batch_id,
                            "Notes": f"Deals:{num_d}, Orders:{num_o}, Positions:{num_p}"
                        }
                        gs_handler.save_upload_history(ws_dict.get(settings.WORKSHEET_UPLOAD_HISTORY), history_log)
                        st.write("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à.")
                        
                        if not has_errors:
                            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                            st.balloons()
                        else:
                            st.warning("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")

                        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Cache ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                        st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á Cache ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")
                        gs_handler.load_actual_trades_from_gsheets.cache_clear() 
                        gs_handler.load_statement_summaries_from_gsheets.cache_clear() 
                        gs_handler.load_deposit_withdrawal_logs_from_gsheets.cache_clear()
                        
                        
                        st.session_state['extracted_data'] = None
                        st.session_state.uploader_key += 1
                        st.rerun()

                    except Exception as e:
                        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                        st.exception(e)
